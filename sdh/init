/*

 #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
 This file is part of the Smart Developer Hub Project:
 http://www.smartdeveloperhub.org/
 Center for Open Middleware
 http://www.centeropenmiddleware.com/
 #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
 Copyright (C) 2015 Center for Open Middleware.
 #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
 */

'use strict';

// SDH platform
GLOBAL.sdhWrapper = require('./sdhWrapper');
GLOBAL.sdhTools = require('./sdhTools');

// GLOBALs
GLOBAL.organizations = null;
GLOBAL.products = null;
GLOBAL.projects = null;
GLOBAL.repositories = null;
GLOBAL.users = null;
GLOBAL.organizationsById = null;
GLOBAL.productsById = null;
GLOBAL.projectsById = null;
GLOBAL.usersById = null;
GLOBAL.repositoriesById = null;
GLOBAL.usersByURI = null;
GLOBAL.productsByURI = null;
GLOBAL.projectsByURI = null;
GLOBAL.repositoriesByURI = null;
GLOBAL.fakeMet = null;
var theCallback;

/**
 * Get Static Data Callback. This method call theCallback after finishing
 * to collect static data repositories and users. Last step in update process
 */
var staticDataCallback = function staticDataCallback() {
    console.log("        * " + products.length + " Products");
    console.log("        * " + projects.length + " Projects");
    console.log("        * " + repositories.length + " Repositories");
    console.log("        * " + users.length + " Users");
    // End
    // Backups activated?
    if (BACKUP_ON) {
        fs.writeFile("./backup/products/" + lastUpdate, JSON.stringify(products), function (err) {
            if (err) {
                return console.log(err);
            }
            console.log("Products saved in - > /backup/products/" + lastUpdate);
        });
        fs.writeFile("./backup/projects/" + lastUpdate, JSON.stringify(projects), function (err) {
            if (err) {
                return console.log(err);
            }
            console.log("Projects saved in - >" + "/backup/projects/" + lastUpdate);
        });
        fs.writeFile("./backup/repositories/" + lastUpdate, JSON.stringify(repositories), function (err) {
            if (err) {
                return console.log(err);
            }
            console.log("Repositories saved in - > /backup/repositories/" + lastUpdate);
        });
        fs.writeFile("./backup/members/" + lastUpdate, JSON.stringify(users), function (err) {
            if (err) {
                return console.log(err);
            }
            console.log("Members saved in - > /backup/members/" + lastUpdate);
        });
    }
    theCallback();
};

/**
 * Get tbd Callback. This method call staticDataCallback after finishing
 * to collect TBDs info.
 */
var tdbCallback = function tdbCallback() {
    // Get static Information. Users, repositories, organization...
    console.log("        * " + tbds.length + " Views");
    console.log("    #Getting basic information about Users, Repositories and Organization...");
    if (BACKUP_ON) {
        fs.writeFile("./backup/views/" + lastUpdate, JSON.stringify(tbds), function (err) {
            if (err) {
                return console.log(err);
            }
            console.log("Views saved in - >" + "/backup/views/" + lastUpdate);
        });
    }
    try {
        // Collect all static information and update global variables
        var staticObject = require('./staticObject');
        staticObject.preloadAll(staticDataCallback);
    } catch (err) {
        console.log("error getting Users, Projects and Repositories from SDH Platform: " + err);
    }
};

/**
 * Get metric Callback. This method call tdbCallback after finishing
 * to collect metrics info.
 */
var metricCallback = function metricCallback() {
    // Get Tbds
    var realMet = 0;
    for (var k in metricUriById) {
        for (var kk in metricUriById[k]) {
            realMet++;
        }
    }
    console.log("        * " + metrics.length + " metrics (real " + (realMet - fakeMet) + " Real SDH-Platform metrics; " + fakeMet + " Fake metrics:)");
    if (BACKUP_ON) {
        fs.writeFile("./backup/metrics/" + lastUpdate, JSON.stringify(metrics), function (err) {
            if (err) {
                return console.log(err);
            }
            console.log("Metrics saved in - >" + "/backup/metrics/" + lastUpdate);
        });
    }
    console.log("    #Getting available Time Based Data from SDH Platform...");
    try {
        // Get all available TBDs from SDH Platform
        sdhWrapper.setAvailableTbds(tdbCallback);
    } catch (err) {
        console.log("error getting TBDs from SDH Platform: " + err);
    }
};

/**
 * Init the static data update
 */
var getInfo = function getInfo() {
    // Get Metrics, tbds, static info... cascade
    console.log("    #Getting available metrics from Agora-Platform...");
    try {
        // Get all available metrics from SDH Platform
        sdhWrapper.setAvailableMetrics(metricCallback);
    } catch (err) {
        console.log("error getting metrics from SDH Platform: " + err);
    }
};

/**
 * update Metrics, TBDs, Users, Repositories and Organization static data.
 * @param callback the method to call after update all static global variables.
 */
exports.update = function update(callback) {
    theCallback = callback;
    lastUpdate = moment(new Date()).format("YYYYMMDDx");
    getInfo();
};
